//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/NovationControlActionAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NovationControlActionAsset: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NovationControlActionAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NovationControlActionAsset"",
    ""maps"": [
        {
            ""name"": ""Novation"",
            ""id"": ""b4a956d0-5d92-42f7-819e-28db445dd5c9"",
            ""actions"": [
                {
                    ""name"": ""SendA1"",
                    ""type"": ""Value"",
                    ""id"": ""e8e97132-28ab-47f2-bcb1-7420274697cb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bd209d12-30f3-4ecb-85c8-3b38eeb2b6f3"",
                    ""path"": ""<MidiDevice>/control013"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""AVJANA"",
                    ""action"": ""SendA1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""AVJANA"",
            ""bindingGroup"": ""AVJANA"",
            ""devices"": []
        }
    ]
}");
        // Novation
        m_Novation = asset.FindActionMap("Novation", throwIfNotFound: true);
        m_Novation_SendA1 = m_Novation.FindAction("SendA1", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Novation
    private readonly InputActionMap m_Novation;
    private List<INovationActions> m_NovationActionsCallbackInterfaces = new List<INovationActions>();
    private readonly InputAction m_Novation_SendA1;
    public struct NovationActions
    {
        private @NovationControlActionAsset m_Wrapper;
        public NovationActions(@NovationControlActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @SendA1 => m_Wrapper.m_Novation_SendA1;
        public InputActionMap Get() { return m_Wrapper.m_Novation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NovationActions set) { return set.Get(); }
        public void AddCallbacks(INovationActions instance)
        {
            if (instance == null || m_Wrapper.m_NovationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NovationActionsCallbackInterfaces.Add(instance);
            @SendA1.started += instance.OnSendA1;
            @SendA1.performed += instance.OnSendA1;
            @SendA1.canceled += instance.OnSendA1;
        }

        private void UnregisterCallbacks(INovationActions instance)
        {
            @SendA1.started -= instance.OnSendA1;
            @SendA1.performed -= instance.OnSendA1;
            @SendA1.canceled -= instance.OnSendA1;
        }

        public void RemoveCallbacks(INovationActions instance)
        {
            if (m_Wrapper.m_NovationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INovationActions instance)
        {
            foreach (var item in m_Wrapper.m_NovationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NovationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NovationActions @Novation => new NovationActions(this);
    private int m_AVJANASchemeIndex = -1;
    public InputControlScheme AVJANAScheme
    {
        get
        {
            if (m_AVJANASchemeIndex == -1) m_AVJANASchemeIndex = asset.FindControlSchemeIndex("AVJANA");
            return asset.controlSchemes[m_AVJANASchemeIndex];
        }
    }
    public interface INovationActions
    {
        void OnSendA1(InputAction.CallbackContext context);
    }
}
